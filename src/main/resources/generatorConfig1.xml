<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--classPathEntry:数据库JDBC驱动，换成自己的驱动位置-->
    <classPathEntry location="D:\program\Maven\repo\org\postgresql\postgresql\42.2.6\postgresql-42.2.6.jar"/>

    <!--一个数据库一个context，defaultModelType="flat"大数据字段，不分表-->
    <context id="PostgresqlTables" targetRuntime="MyBatis3Simple" defaultModelType="flat">

        <!--自动识别数据库关键字，默认false，如果设置为true，
        根据SqlReservedWords中定义的关键字列表；一般保留默认值，
        遇到数据库关键字（Java关键字），使用columnOverride覆盖-->
        <property name="autoDelimitKeywords" value="true"/>

        <!--生成java文件的编码-->
        <property name="javaFileEncoding" value="utf-8"/>

        <!--beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号-->
        <property name="beginningDelimiter" value=""/>
        <property name="endingDelimiter" value=""/>

        <!--格式化java代码-->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>

        <!--格式化xml代码-->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- 为生成的Java模型类添加序列化接口 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- 为生成的Java模型创建一个toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>

        <!--注释-->
        <commentGenerator>
            <property name="suppressAllComments" value="true"/>   <!--是否取消注释-->
            <property name="suppressDate" value="false"/>   <!--是否生成的注释带时间戳-->
        </commentGenerator>

        <!--jdbc连接-->
        <jdbcConnection driverClass="org.postgresql.Driver"
                        connectionURL="jdbc:postgresql://122.112.204.237/db_web_demo" userId="postgres" password="11270000"/>

        <!--类型转换-->
        <javaTypeResolver>
            <!--是否使用bigDecimal, false可自动转化一下类型（Long, Integer, Short, etc）-->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!--生成实体类地址-->
        <javaModelGenerator targetPackage="com.mybatis.entity" targetProject="src/main/java">
            <!--是否允许子包，即targetPackage.schemaName.tableName-->
            <property name="enableSubPackages" value="false"/>
            <!--是否对model添加构造函数-->
            <property name="constructorBased" value="true"/>
            <!--是否对类CHAR类型的列的数据进行trim操作-->
            <property name="trimStrings" value="true"/>
            <!--建立的Model对象是否不可改变，即生成的Model对象不会有setter方法，只有构造函数-->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!--生成map.xml文件存放地址，为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="mappers" targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!--targetPackage: mapper接口dao生成的位置-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.mybatis.dao" targetProject="src/main/java">
            <!--enableSubPackage:是否让schema作为包的后缀-->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- table可以有多个,每个数据库中的表都可以写一个table，tableName表示要匹配的数据库表,
        也可以在tableName属性中通过使用%通配符来匹配所有数据库表,只有匹配的表才会自动生成文件 enableSelectByPrimaryKey相应的配置表示是否生成相应的接口 -->
        <table tableName="t_contractor_info" domainObjectName="ContractorInfo"></table>

    </context>
</generatorConfiguration>